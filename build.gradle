plugins {
    id 'java'
    id "com.palantir.git-version" version "3.0.0"
    id "org.asciidoctor.jvm.convert" version "4.0.2"
    id 'org.springframework.boot' version "${springBootVersion}"
    id "com.gorylenko.gradle-git-properties" version "2.4.2"
    id 'com.adarshr.test-logger' version '4.0.0'
    id "com.ofg.uptodate" version "1.6.3"
    id "com.github.ben-manes.versions" version "0.51.0"
}

group = 'com.example'
version = gitVersion()
def javaVersion = JavaVersion.VERSION_17
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenCentral()
}

ext["snippetsDir"] = "build/generated-snippets"
configurations {
    create("asciidoctor")
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
    annotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
    testAnnotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
    asciidoctor(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.retry:spring-retry'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
    testImplementation 'org.springframework.security:spring-security-test'
    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-contract-wiremock
    testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '4.1.3'
}

springBoot {
    buildInfo()
}

bootRun {
    systemProperty "spring.output.ansi.enabled", "always"
}

bootJar {
    classifier("boot")
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    outputs.dir("build/resources/main")
    forkOptions {
        jvmArgs '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
                '--add-opens', 'java.base/java.io=ALL-UNNAMED'
    }
    attributes(
            springbootversion: "$springBootVersion",
            projectdir: "$projectDir",
            snippets: snippetsDir
    )
    doLast {
        copy {
            from "build/docs/asciidoc"
            into "build/resources/main/static/docs"
            include "index.html"
        }
    }
    dependsOn test
}

//noinspection UnnecessaryQualifiedReference
task asciidoctorFast(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    inputs.dir snippetsDir
    dependsOn = []
    outputs.dir("build/resources/main")
    doLast {
        copy {
            from "build/asciidoc/html5"
            into "build/resources/main/static/docs"
            include "index.html"
        }
    }
}

asciidoctor.mustRunAfter bootJarMainClassName
jar.mustRunAfter asciidoctor
bootJar.dependsOn asciidoctor

wrapper {
    gradleVersion = "7.3.1"
    distributionType = Wrapper.DistributionType.ALL
}
